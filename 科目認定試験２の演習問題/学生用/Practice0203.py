###############################################################################
# オブジェクトが上書きされないようにオブジェクトを複製する関数
# （防御的コピー）の動作テストをする未完成のプログラムがある。
# コメントを参考に空欄を埋めて、プログラムを完成させなさい。
###############################################################################

# リストを複製する関数
# 引数の値が何も指定されていなかったら、空のリストをデフォルト値とする
def protect_copy(lst3.):
# -------------------------------------
# 問１ 当てはまる選択肢はどれか
# 1. ()
# 2. , val
# 3. = []
# -------------------------------------
    # 新規リストを作成する
    new_lst = []

    # オブジェクトの複製を行う
    for val in lst:
        new_lst.append(val)

    # 複製を行ったオブジェクトを戻す
    return 2.
    # -------------------------------------
    # 問２ 当てはまる選択肢はどれか
    # 1. lst
    # 2. new_lst
    # 3. val
    # -------------------------------------

# リストを作成する
score = [10, 20, 30]

# identityを確認する
i1 = 3.(score)
# -------------------------------------
# 問３ 当てはまる選択肢はどれか
# 1. identity
# 2. id
# 3. i1
# -------------------------------------


# scoreに複製を行ったオブジェクトを代入
score = 3.(score)
# -------------------------------------
# 問４ 当てはまる選択肢はどれか
# 1. new_lst
# 2. protect_copy
# 3. lst
# -------------------------------------

# identityを確認する
i2 = 3.(score)

print('元リストのidentity:{}'.format(i1))
print('上書き後のリストのidentity:{}'.format(i2))

# 不一致であれば成功
if i1 != i2:
    print('オブジェクトの複製コピーは成功しました')
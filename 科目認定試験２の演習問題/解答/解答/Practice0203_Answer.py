###############################################################################
# オブジェクトが上書きされないようにオブジェクトの複製を行う
# 関数の動作テストをする未完成のプログラムがある。
# コメントを参考に空欄を埋めて、プログラムを完成させなさい。
###############################################################################

# リストを複製する関数
# 引数の値が何も指定されていなかったら、空のリストをデフォルト値とする
#def protect_copy(lst__(1)__):
# -------------------------------------
# 問１以下に当てはまる選択肢はどれか
# 1. ()
# 2. , val
# 3. = []
# -------------------------------------
##答え
def protect_copy(lst = []):

    # 新規リストを作成する
    new_lst = []

    # オブジェクトの複製を行う
    for val in lst:
        new_lst.append(val)

    # 複製を行ったオブジェクトを戻す
    # -------------------------------------
    # 問２以下に当てはまる選択肢はどれか
    # 1. lst
    # 2. new_lst
    # 3. val
    # -------------------------------------
    #return __(2)__
    ###答え
    return new_lst

# リストを作成する
score = [10, 20, 30]

# identityを確認する
#i1 = __(3)__(score)
# -------------------------------------
# 問３以下に当てはまる選択肢はどれか
# 1. identity
# 2. id
# 3. i1
# -------------------------------------
##答え
i1 = id(score)


# scoreに複製を行ったオブジェクトを代入
#score = __(4)__(score)
# -------------------------------------
# 問４以下に当てはまる選択肢はどれか
# 1. new_lst
# 2. protect_copy
# 3. lst
# -------------------------------------
##答え
score = protect_copy(score)

# identityを確認する
#i2 = __(3)__(score)
i2 = id(score)

print('元リストのidentity:{}'.format(i1))
print('上書き後のリストのidentity:{}'.format(i2))

# 不一致であれば成功
if i1 != i2:
    print('オブジェクトの複製コピーは成功しました')
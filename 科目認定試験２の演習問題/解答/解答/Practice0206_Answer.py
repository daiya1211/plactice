#################################################
# 下記のプログラムが何をしようとしているのか
# コメント部分の補足説明をしなさい。
#################################################

print("#-1----------------------------------------------#")

pow_list = []
for i in range(0, 6):
    pow_list = i ** 2

print(f'計算結果は：{pow_list}')
# 実行した結果は__(1)__と表示される
# ------------------------------------
# 問１以下に当てはまる選択肢はどれか
# 1. 55
# 2. 25
# 3. 0 1 4 9 16 25
# ------------------------------------
# 回答
# 実行した結果は25と表示される

print("#-2----------------------------------------------#")

# 関数の定義
def display_number(num = 0):
    print("引数の数を表示します：",num)

# 変数numを定義し、 9を代入する
num = 9

# 関数の呼び出し
display_number(num) 
# 表示されるのは__(2)__
# ------------------------------------
# 問２以下に当てはまる選択肢はどれか
# 1. 0
# 2. 9
# 3. num
# ------------------------------------
# 回答
# 表示されるのは9

print("#-3----------------------------------------------#")

# 関数の定義
# 引数を__(3)__引数で受け取る
def max_score(*scores):
# ------------------------------------
# 問２以下に当てはまる選択肢はどれか
# 1. 変長
# 2. 可変長
# 3. 不変長
# ------------------------------------
# 回答
# 引数を可変長引数で受け取る
    max = 0
    count = 0
    for score in scores:
        count = count+1
        if max < score:
            max = score
    return (count, max)

# 4人分の点数からタプルfour_scoreに代入する
four_score = (52,48,62,54)
# 変数にmax_scoreの実行結果を格納する
result = max_score(*four_score)
print(result[0],"人の中で表示される得点は",result[1])
# 結果を表示する。表示される文字列は"__(4)__"
# ------------------------------------
# 問４以下に当てはまる選択肢はどれか
# 1. 4人の中で表示される得点は48
# 2. 4人の中で表示される得点は54
# 3. 4人の中で表示される得点は62
# ------------------------------------
# 回答
# 結果を表示する。表示される文字列は"4人の中で表示される得点は62"


print("#-4----------------------------------------------# ")

# 引数で送られてきた値が0~60の場合はTrueを返す関数を定義する
def check_zero_sixty(score):
    if 0 <= score and score <= 60:
        return True
    else:
        return False

# 引数で送られてきた値が0~80の場合はTrueを返す関数を定義する
def check_zero_eighty(score):
    if 0 <= score and score <= 80:
        return True
    else:
        return False

# チェックする関数とチェックされる値のリストを受け取り、不正データを発見し表示する高階関数
def find_illegal_score(check_func,scoreList):
    count = 0
    flg = True
    for score in scoreList:
        count = count + 1
        if not check_func(score):
            print(count,"番目の点数",score,"は不正な値です")
            flg = False
    if count == 0:
        print("点数がありません")
    elif flg :
        print("不正な値はありませんでした。")

# 80点満点のテストの結果のリストがある。
# find_illegal_score関数を実行する
score_list1 = [31,63,78,67,79,63,73]
find_illegal_score(check_zero_eighty,score_list1)
# 実行した結果、表示されるのは__(5)__
# ------------------------------------
# 問５以下に当てはまる選択肢はどれか
# 1. 4番目の点数22は不正な値です
# 2. 不正な値はありませんでした。
# 3. 点数がありません
# ------------------------------------
# 回答
# 実行した結果、表示されるのは不正な値はありませんでした。




# 60点満点のテストの結果のリストがある。
# find_illegal_score関数を実行する
score_list2 = [54,22,46,67,59,51,38]
find_illegal_score(check_zero_sixty,score_list2)
# 実行した結果、表示されるのは__(6)__
# ------------------------------------
# 問６以下に当てはまる選択肢はどれか
# 1. 点数がありません
# 2. 不正な値はありませんでした。
# 3. 4番目の点数67は不正な値です
# ------------------------------------
# 回答
# 実行した結果、表示されるのは4番目の点数67は不正な値です



print("#-5----------------------------------------------# ")

# matplotlib.pyplotをインポート
import matplotlib.pyplot as plt

# 外部ファイルのパスを入力してもらう
path = input('パスとファイル名を入力：')

# 外部ファイルの中身を格納するリスト
lst = []

# __(7)__処理を行う範囲の開始
# ------------------------------------
# 問７以下に当てはまる選択肢はどれか
# 1. 実行時
# 2. 例外
# 3. 並行
# ------------------------------------
# 回答
# 例外処理を行う範囲の開始

try:
    # 外部ファイルを開く
    with open(path, 'r') as file:
        for line in file:
                # __(8)__エラーが発生した場合、__(9)__の行に処理を移す
                # ------------------------------------
                # 問８以下に当てはまる選択肢はどれか
                # 1. 実行時
                # 2. 例外
                # 3. 並行
                # ------------------------------------
                # ------------------------------------
                # 問９以下に当てはまる選択肢はどれか
                # 1. catch
                # 2. expect
                # 3. except
                # ------------------------------------
                # 回答
                # 実行時エラーが発生した場合、exceptの行に処理を移す
                lst.append(int(line))

    # plot関数を使用してリストをセットする
    plt.plot(lst)
    plt.show()
    # 実行した結果、__(10)__が表示される
    # ------------------------------------
    # 問１０以下に当てはまる選択肢はどれか
    # 1. 表
    # 2. プロット
    # 3. グラフ
    # ------------------------------------
    # 回答
    # 実行した結果、グラフが表示される


# __(8)__エラー発生時の処理
# 実行時エラー発生時の処理
except ValueError:
    # 型変換が出来なければエラーメッセージを表示する
     print('数値型に変換できるファイルを指定して下さい。')